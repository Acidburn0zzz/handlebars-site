#intro
  %p
    Handlebars provides the power necessary to let you build
    <strong>semantic templates</strong> effectively with no frustration.

  %p
    Handlebars is largely compatible with Mustache templates.
    In most cases it is possible to swap out Mustache with
    Handlebars and continue using your current templates.
    Complete details can be found
    <a href="https://github.com/wycats/handlebars.js#differences-between-handlebarsjs-and-mustache">here</a>.

= link("Download: 2.0.0", "http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars-v2.0.0.js", :class => 'download')
= link("Download: runtime-2.0.0", "http://builds.handlebarsjs.com.s3.amazonaws.com/handlebars.runtime-v2.0.0.js", :class => 'download-runtime')

%h2#getting-started
  Getting Started

.contents
  .bullet
    .description
      Handlebars templates look like regular HTML, with embedded
      handlebars expressions.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <div class="body">
          {{body}}
        </div>
      </div>
    .notes
      A handlebars expression is a <code>{{</code>, some contents,
      followed by a <code>}}</code>
    = link("Learn More: Expressions", "expressions.html", :class => "more-info")

  .bullet
    .description
      You can deliver a template to the browser by including it
      in a <code>&lt;script&gt;</code> tag.
    :html
      <script id="entry-template" type="text/x-handlebars-template">
        template content
      </script>

  .bullet
    .description
      Compile a template in JavaScript by using
      <code>Handlebars.compile</code>
    :javascript
      var source   = $("#entry-template").html();
      var template = Handlebars.compile(source);
    .notes
      It is also possible to precompile your templates. This will
      result in a smaller required runtime library and significant
      savings from not having to compile the template in the
      browser. This can be especially important when working with
      mobile devices.
    = link("Learn More: Precompilation", "precompilation.html", :class => "more-info")

  .bullet
    .description
      Get the HTML result of evaluating a Handlebars template by
      executing the template with a context.
    :javascript
      var context = {title: "My New Post", body: "This is my first post!"}
      var html    = template(context);
    .notes
      results in
    :html
      <div class="entry">
        <h1>My New Post</h1>
        <div class="body">
          This is my first post!
        </div>
      </div>

    = link("Learn More: Execution", "execution.html", :class => "more-info")

%h2#html-escaping
  HTML Escaping

.context
  .bullet
    .description
      Handlebars HTML-escapes values returned by a <code>{{expression}}</code>.
      If you don't want Handlebars to escape a value, use the "triple-stash", <code>{{{</code>.

    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <div class="body">
          {{{body}}}
        </div>
      </div>

    .notes
      with this context:

    :javascript
      {
        title: "All about <p> Tags",
        body: "<p>This is a post about &lt;p&gt; tags</p>"
      }

    .notes
      results in:

    :html
      <div class="entry">
        <h1>All About &lt;p&gt; Tags</h1>
        <div class="body">
          <p>This is a post about &lt;p&gt; tags</p>
        </div>
      </div>

    .notes
      Handlebars will not escape a <code>Handlebars.SafeString</code>.
      If you write a helper that generates its own HTML, you will usually
      want to return a <code>new Handlebars.SafeString(result)</code>.
      In such a circumstance, you will want to manually escape parameters.

    :javascript
      Handlebars.registerHelper('link', function(text, url) {
        text = Handlebars.Utils.escapeExpression(text);
        url  = Handlebars.Utils.escapeExpression(url);

        var result = '<a href="' + url + '">' + text + '</a>';

        return new Handlebars.SafeString(result);
      });

    .notes
      This will escape the passed in parameters, but mark the response as
      safe, so Handlebars will not try to escape it even if the "triple-stash"
      is not used.

%h2#block-expressions
  Block Expressions

.context
  .bullet
    .description
      Block expressions allow you to define helpers that will invoke
      a section of your template with a different context than the
      current. Let's consider a helper that will generate an HTML list:

    :html
      {{#list people}}{{firstName}} {{lastName}}{{/list}}

    .notes
      If we have the following context:

    :javascript
      {
        people: [
          {firstName: "Yehuda", lastName: "Katz"},
          {firstName: "Carl", lastName: "Lerche"},
          {firstName: "Alan", lastName: "Johnson"}
        ]
      }

    .notes
      we would create a helper named <code>list</code> to generate our
      HTML list. The helper receives the <code>people</code> as its
      first parameter, and an options hash as its second parameter.
      The options hash contains a property named <code>fn</code>,
      which you can invoke with a context just as you would invoke a
      normal Handlebars template.

    :javascript
      Handlebars.registerHelper('list', function(items, options) {
        var out = "<ul>";

        for(var i=0, l=items.length; i<l; i++) {
          out = out + "<li>" + options.fn(items[i]) + "</li>";
        }

        return out + "</ul>";
      });

    .notes
      When executed, the template will render:

    :html
      <ul>
        <li>Yehuda Katz</li>
        <li>Carl Lerche</li>
        <li>Alan Johnson</li>
      </ul>

    .notes
      Block helpers have more features, such as the ability to create an
      <code>else</code> section (used, for instance, by the built-in if
      helper).

    .notes
      Since the contents of a block helper are escaped when you call
      <code>options.fn(context)</code>, Handlebars does not escape
      the results of a block helper. If it did, inner content would
      be double-escaped!

    = link("Learn More: Block Helpers", "block_helpers.html", :class => "more-info")

%h2#paths
  Handlebars Paths

.content
  .bullet
    .description
      Handlebars supports simple paths, just like Mustache.
    :html
      <p>{{name}}</p>

  .bullet
    .description
      Handlebars also supports nested paths, making it possible
      to look up properties nested below the current context.
    :html
      <div class="entry">
        <h1>{{title}}</h1>
        <h2>By {{author.name}}</h2>

        <div class="body">
          {{body}}
        </div>
      </div>
    .notes
      That template works with this context
    :javascript
      var context = {
        title: "My First Blog Post!",
        author: {
          id: 47,
          name: "Yehuda Katz"
        },
        body: "My first post. Wheeeee!"
      };
    .notes
      This makes it possible to use Handlebars templates with
      more raw JSON objects.

  .bullet
    .description
      Nested handlebars paths can also include <code>../</code> segments,
      which evaluate their paths against a parent context.
    :html
      <h1>Comments</h1>

      <div id="comments">
        {{#each comments}}
        <h2><a href="/posts/{{../permalink}}\#{{id}}">{{title}}</a></h2>
        <div>{{body}}</div>
        {{/each}}
      </div>
    .notes
      Even though the link is printed while in the context of a comment,
      it can still go back to the main context (the post) to retrieve
      its permalink.
    .notes
      The <code>../</code> path segment references the parent template
      scope, not one level up in the context. This is because block
      helpers can invoke a block with any context, so the notion of
      "one level up" isn't particularly meaningful except as a reference
      to the parent template scope.

  .bullet
    .description
      Handlebars also allows for name conflict resolution between helpers and
      data fields via a <code>this</code> reference:
    :html
      <p>{{./name}} or {{this/name}} or {{this.name}}</p>
    .notes
      Any of the above would cause the <code>name</code> field on the
      current context to be used rather than a helper of the same name.

%h2#Comments
  Template comments with <code>{{!-- --}}</code> or <code>{{! }}</code>.

.content
  .bullet
    .description
      You can use comments in your handlebars code just as you would in your
      code. Since there is generally some level of logic, this is a good
      practice.
    :html
      <div class="entry">
        {{!-- only output this author names if an author exists --}}
        {{#if author}}
          <h1>{{firstName}} {{lastName}}</h1>
        {{/if}}
      </div>
    .notes
      The comments will not be in the resulting output. If you'd like the
      comments to show up. Just use html comments, and they will be output.
    :html
      <div class="entry">
        {{! This comment will not be in the output }}
        <!-- This comment will be in the output -->
      </div>

    .notes
      Any comments that must contain <code>}}</code> or other handlebars
      tokens should use the <code>{{!-- --}}</code> syntax.

%h2#helpers
  Helpers

.content
  .bullet
    .description
      Handlebars helpers can be accessed from any context in a template.
      You can register a helper with the <code>Handlebars.registerHelper</code> method.
    :html
      <div class="post">
        <h1>By {{fullName author}}</h1>
        <div class="body">{{body}}</div>

        <h1>Comments</h1>

        {{#each comments}}
        <h2>By {{fullName author}}</h2>
        <div class="body">{{body}}</div>
        {{/each}}
      </div>

    .notes
      when using this context and helpers:

    :javascript
      var context = {
        author: {firstName: "Alan", lastName: "Johnson"},
        body: "I Love Handlebars",
        comments: [{
          author: {firstName: "Yehuda", lastName: "Katz"},
          body: "Me too!"
        }]
      };

      Handlebars.registerHelper('fullName', function(person) {
        return person.firstName + " " + person.lastName;
      });

    .notes
      results in:

    :html
      <div class="post">
        <h1>By Alan Johnson</h1>
        <div class="body">I Love Handlebars</div>

        <h1>Comments</h1>

        <h2>By Yehuda Katz</h2>
        <div class="body">Me Too!</div>
      </div>

  .bullet
    .description
      Helpers receive the current context as the <code>this</code> context
      of the function.

    :html
      <ul>
        {{#each items}}
        <li>{{agree_button}}</li>
        {{/each}}
      </ul>

    .notes
      when using this context and helpers:

    :javascript
      var context = {
        items: [
          {name: "Handlebars", emotion: "love"},
          {name: "Mustache", emotion: "enjoy"},
          {name: "Ember", emotion: "want to learn"}
        ]
      };

      Handlebars.registerHelper('agree_button', function() {
        var emotion = Handlebars.escapeExpression(this.emotion),
            name = Handlebars.escapeExpression(this.name);

        return new Handlebars.SafeString(
          "<button>I agree. I " + emotion + " " + name + "</button>"
        );
      });

    .notes
      results in:

    :html
      <ul>
        <li><button>I agree. I love Handlebars</button></li>
        <li><button>I agree. I enjoy Mustache</button></li>
        <li><button>I agree. I want to learn Ember</button></li>
      </ul>

    .notes
      If your helper returns HTML that you do not want escaped, make sure
      to return a new <code>Handlebars.SafeString</code>.


%h2#builtins
  Built-In Helpers

.contents
  .bullet
    .description
      Handlebars offers a varity of built-in helpers such as the <code>if</code> conditional
      and <code>each</code> iterator.

    = link("Learn More: Built-In Helpers", "builtin_helpers.html", :class => "more-info")


%h2#Utilities
  API Reference

.contents
  .bullet
    .description
      Handlebars offers a varity of APIs and utility methods for applications and helpers.
    = link("Learn More: API Reference", "reference.html", :class => "more-info")
