#intro
  Handlebars expressions are the basic unit of a Handlebars template.
  You can use them alone in a <code>{{mustache}}</code>, pass them
  to a Handlebars helper, or use them as values in hash arguments.

%h2#basic-blocks
  Basic Usage

.contents
  .bullet
    .description
      The simplest Handlebars expression is a simple identifier:
    :html
      <h1>{{title}}</h1>
    .notes
      This expression means "look up the <code>title</code> property in
      the current context". Block helpers may manipulate the current
      context, but they do not change the basic meaning of an expression.
    .notes
      Actually, it means "look for a helper named <code>title</code>,
      then do the above", but we'll get to that soon enough.

  .bullet
    .description
      Handlebars expressions can also be dot-separated paths.
    :html
      <h1>{{article.title}}</h1>
    .notes
      This expression means "look up the <code>article</code> property in
      the current context. Then look up the <code>title</code>
      property in the result".
    .notes
      Handlebars also supports a deprecated <code>/</code> syntax,
      so you could write the above template as:
    :html
      <h1>{{article/title}}</h1>

  .bullet
    .description
      Identifiers may be any unicode character except for the following:
    .notes
      Whitespace
      %code !
      %code "
      %code #
      %code %
      %code &
      %code '
      %code (
      %code )
      %code *
      %code +
      %code ,
      %code .
      %code /
      %code ;
      %code <
      %code =
      %code >
      %code @
      %code [
      %code \
      %code ]
      %code ^
      %code `
      %code {
      %code |<!-- Comment to prevent multiline parsing -->
      %code }
      %code ~

  .bullet
    .description
      To reference a property that is not a valid identifier, you can
      use segment-literal notation, <code>[</code>:
    :html
      {{#each articles.[10].[#comments]}}
        <h1>{{subject}}</h1>
        <div>
          {{body}}
        </div>
      {{/each}}
    .notes
      In the example above, the template will treat the <code>each</code>
      parameter roughly equivalent to this javascript:
      <code>articles[10]['#comments']</code>
    .notes
      You may not include a closing <code>]</code> in a path-literal,
      but all other characters are fair game.

  .bullet
    .description
      Handlebars HTML-escapes values returned by a <code>{{expression}}</code>.
      If you don't want Handlebars to escape a value, use the "triple-stash", <code>{{{</code>
    :html
      {{{foo}}}

%h2#helpers
  Helpers

.contents
  .bullet
    .description
      A Handlebars helper call is a simple identifier, followed by
      zero or more parameters (separated by space). Each parameter is a Handlebars
      expression.
    :html
      {{{link story}}}
    .notes
      In this case, <code>link</code> is the name of a Handlebars
      helper, and story is a parameter to the helper. Handlebars
      evaluates parameters in exactly the same way described above
      in "Basic Usage".
    :javascript
      Handlebars.registerHelper('link', function(object) {
        return new Handlebars.SafeString(
          "<a href='" + object.url + "'>" + object.text + "</a>"
        );
      });
    .notes
      When returning HTML from a helper, you should return a
      Handlebars SafeString if you don't want it to be escaped
      by default.

  .bullet
    .description
      You can also pass a simple String as a parameter to Handlebars
      helpers.
    :html
      {{{link "See more..." story.url}}}
    .notes
      In this case, Handlebars will pass the link helper two parameters:
      the String <code>"See more..."</code> and the result of evaluating
      <code>story.url</code> in the current context.
    :javascript
      Handlebars.registerHelper('link', function(text, url) {
        return new Handlebars.SafeString(
          "<a href='" + url + "'>" + text + "</a>"
        );
      });
    .notes
      You could use the exact same helper with dynamic text based on
      the value of <code>story.text</code>:
    :html
      {{{link story.text story.url}}}

  .bullet
    .description
      Handlebars helpers can also receive an optional sequence of key-value
      pairs as their final parameter (referred to as hash arguments in
      the documentation):
    :html
      {{{link "See more..." href=story.url class="story"}}}
    .notes
      The keys in hash arguments must each be simple identifiers, and the
      values are Handlebars expressions. This means that values can
      be simple identifiers, paths, or Strings.
    :javascript
      Handlebars.registerHelper('link', function(text, options) {
        var attrs = [];

        for(var prop in options.hash) {
          attrs.push(prop + '="' + options.hash[prop] + '"');
        }

        return new Handlebars.SafeString(
          "<a " + attrs.join(" ") + ">" + text + "</a>"
        );
      });
    .notes
      Handlebars provides additional metadata, such as Hash arguments,
      to helpers as a final parameter.

  .bullet
    .description
      Handlebars also offers a mechanism for invoking a helper with
      a block of the template. Block helpers can then invoke that
      block zero or more times with any context it chooses.
    = link("Learn More: Block Helpers", "block_helpers.html")

%h2#subexpressions
  Subexpressions

.contents
  .bullet
    .description
      Handlebars offers support for subexpressions, which allows
      you to invoke multiple helpers within a single mustache, and
      pass in the results of inner helper invocations as arguments
      to outer helpers. Subexpressions are delimited by
      parentheses.
    :html
      {{outer-helper (inner-helper 'abc') 'def'}}
    .notes
      In this case, <code>inner-helper</code> will get invoked
      with the string argument <code>'abc'</code>, and whatever
      the <code>inner-helper</code> function returns will get
      passed in as the first argument to <code>outer-helper</code>
      (and <code>'def'</code> will get passed passed in as the 
      second argument to <code>outer-helper</code>.
